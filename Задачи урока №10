-- 1.Проанализировать какие запросы могут выполняться наиболее часто 
-- в процессе работы приложения и добавить необходимые индексы.

-- Cоставной индекс на по городу:
CREATE INDEX cities_name_idx ON cities(name);

/*
2. Задание на оконные функции
Построить запрос, который будет выводить следующие столбцы:
имя группы
среднее количество пользователей в группах 
(сумма количестива пользователей во всех группах делённая на количество групп)
самый молодой пользователь в группе (желательно вывести имя и фамилию)
самый старший пользователь в группе (желательно вывести имя и фамилию)
количество пользователей в группе
всего пользователей в системе (количество пользователей в таблице users)
отношение в процентах для последних двух значений 
(общее количество пользователей в группе / всего пользователей в системе) * 100
*/
SELECT distinct
  communities.name as communities_name, 
  round(count(communities_users.user_id) over() / (select count(*) from communities), 2) AS avg_users,
  first_value(CONCAT_WS(" ", users.first_name, users.last_name)) 
    over (partition by communities.id ORDER BY profiles.birthday desc) AS youngest,
  first_value (concat_WS("_", users.first_name , users.last_name)) 
    over (partition by communities.id order by profiles.birthday ) as eldest,
  count(communities_users.user_id) OVER (PARTITION BY communities.id) AS quantity_users,
  count(users.id) over () AS total_users,
  count(communities_users.user_id) OVER (PARTITION BY communities.id) 
    / count(users.id) over () * 100 as percentage 
      from communities  
        join communities_users  
          ON communities_users.community_id = communities.id
        join users  
          ON users.id = communities_users.user_id 
        join profiles 
          ON profiles.user_id = users.id ;
